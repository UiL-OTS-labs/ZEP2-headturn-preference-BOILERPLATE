/******************************************************************************\
FILE:           grouping.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Group record preparation:
- definition of groups
- creation of group record fields (i.e. attributes)
- checking group record fields
- assigning participant to group

\******************************************************************************/


// Symbolic definition of groups.
enum TestGroup
{
    ORDER1,             // pp in this group get order 1
    ORDER2,             // pp in this group get order 2
    ORDER3,             // pp in this group get order 3
    ORDER4,             // pp in this group get order 4
}


// Creates group record fields, if applicable. All fields added must have a
// definition in attributes.zm.
int create_group_fields()
{
    return OK;
}


// Checks value of required group record fields, if applicable.
int check_group_fields()
{
    return OK;
}


// Assigns participant to a group.
int assign_participant_to_group()
{
    // Select a group based on the number of finished sessions done so far for
    // current experiment status. This function should not be used when you
    // will be running parallel sessions. Because in that situation if you
    // start two or more sessions around the same time they will all see the
    // same number of finished sessions.
//    return select_group_from_num_finished_sessions();  don't use this ATM

    TestGroup group;
    int ngroups = num_participant_groups();

    // Use current number of finished sessions modulo ngroups to refer to
    // the group to be selected.
    int nsessions = expdb.count_sessions(expdb.experiment.id,
        expdb.experiment.status, SESSION_STATUS_FINISHED);
    int pick = nsessions % ngroups;
    int n;
    while (n < pick)
    {
        group++;
        n++;
    }

    selected_group = group;

    return OK;
}
