/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Defines the global procedure for this experiment phase.


Global structure of this experiment phase:

  - familiarization part
      trial


HISTORY:
2012-02-20 TV   Created.
2017-05-26 TV   Adapted for Zep 2.0.

\******************************************************************************/

//requires 2.0;

import defs;
import stimuli;
import output;
import fam_handler;
import std_blank_page;
import repeat_query_page;

// Familiarization item table.
TestItem[..] fam_items;

Block task
{
    Block familiarization
    {
        TestItem    item;           // current item

        on_event:entry()
        {
            num_cycles = fam_items.size;
        }

        Trial trial
        {
            on_event:entry()
            {
                item = fam_items[familiarization.cycle];

                fam_handler.setup();

                fam_handler.action(this, item, reference_time);
            }

            on_event:exit()
            {
                fam_handler.cleanup(event_time);

                // Add new row to output table.
                SummaryTrialOutput trial_output = generate_summary(item, fam_handler.lightpos);
                trial_summary_output_append(trial_output);

                // // Also save look/no-look durations.

                int nstamps = control.clock.timestamps.size - 1;

                int index;
                while (index < nstamps)
                {
                    time lasttimestamp = control.clock.timestamps[index];
                    SingleEpochOutput epoch_output;

                    epoch_output.trial_type    = trial_output.trial_type;
                    epoch_output.stimulus      = trial_output.stimulus;
                    epoch_output.trial_num     = trial_output.trial_num;

                    epoch_output.duration      = dur_to_seconds(control.clock.timestamps[index+1] - lasttimestamp); // seconds

                    epoch_output.epoch_type    = (index & 1) ? "NOTLOOKING" : "LOOKING";

                    epoch_output.snd_direction = trial_output.snd_direction;

                    looknolook_output_append(epoch_output);

                    index++;
                }

                save_trial_data();
            }
        }
    }

    Part repeat_query
    {
        on_event:entry()
        {
            blank_page.action(null, 2s);
            repeat_query_page.action(this,
                "<b>Should the training phase be repeated?</b>\n\n"
                "Press the <i>middle</i> button (or space) to <u>repeat</u> training.\n\n"
                "Press any <i>other</i> button/key other to <u>continue</u> to test."
            );
        }
    }

    TransientPart repeat_option
    {
        int number_of_repeats;

        on_event:entry()
        {
            if(repeat_query_page.repeat_flag)
            {
                familiarization.enter();
                number_of_repeats++;
            }
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
