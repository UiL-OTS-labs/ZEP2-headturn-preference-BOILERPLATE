/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Defines the global procedure for this experiment phase.


Global structure of this experiment phase:

  - familiarization part
      trial


HISTORY:
2012-02-20 TV   Created.
2017-05-26 TV   Adapted for Zep 2.0.

\******************************************************************************/

//requires 2.0;

import defs;
import stimuli;
import shuffle;
import output;
import fam_handler;

// Familiarization item table.
TestItem[..] fam_items;

Block task
{
    Block familiarization
    {
        TestItem    item;           // current item


        on_event:entry()
        {
            num_cycles = fam_items.size;

            fam_handler.setup();
        }


        on_event:exit()
        {
            fam_handler.cleanup(event_time);

            // Add new row to output table.
            FamOutput output;
            output.lt = int(control.clock.duration);
            output.nlt =
                int(control.clock.total_runtime - control.clock.duration);
            output.lookaways = (control.clock.timestamps.size - 1) / 2;
            fam_output_append(output);

            // Also save look/no-look durations.
            looknolook_output_append(0);

            save_trial_data();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = fam_items[familiarization.cycle];

                // A familiarization trial is the presentation of one
                // stimulus. The contingency procedure for the lights
                // starts at trial 1 and runs independently from the
                // auditory stimuli.
                fam_handler.action(this, item, reference_time);
            }
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
